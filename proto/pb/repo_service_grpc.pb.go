// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: repo_service.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RepoServiceClient is the client API for RepoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepoServiceClient interface {
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*PrivateRepoResponse, error)
	GetPrivateRepoByIdentifier(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*PrivateRepoResponse, error)
	GetPublicRepoByIdentifier(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*PublicRepoResponse, error)
	GetPrivateRepos(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*PrivateReposResponse, error)
	GetPublicRepos(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*PublicReposResponse, error)
	UpdateRepo(ctx context.Context, in *PrivateRepoRequest, opts ...grpc.CallOption) (*PrivateReposResponse, error)
	DeleteRepo(ctx context.Context, in *PrivateRepoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type repoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepoServiceClient(cc grpc.ClientConnInterface) RepoServiceClient {
	return &repoServiceClient{cc}
}

func (c *repoServiceClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*PrivateRepoResponse, error) {
	out := new(PrivateRepoResponse)
	err := c.cc.Invoke(ctx, "/RepoService/CreateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetPrivateRepoByIdentifier(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*PrivateRepoResponse, error) {
	out := new(PrivateRepoResponse)
	err := c.cc.Invoke(ctx, "/RepoService/GetPrivateRepoByIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetPublicRepoByIdentifier(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*PublicRepoResponse, error) {
	out := new(PublicRepoResponse)
	err := c.cc.Invoke(ctx, "/RepoService/GetPublicRepoByIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetPrivateRepos(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*PrivateReposResponse, error) {
	out := new(PrivateReposResponse)
	err := c.cc.Invoke(ctx, "/RepoService/GetPrivateRepos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetPublicRepos(ctx context.Context, in *IdentifierRequest, opts ...grpc.CallOption) (*PublicReposResponse, error) {
	out := new(PublicReposResponse)
	err := c.cc.Invoke(ctx, "/RepoService/GetPublicRepos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) UpdateRepo(ctx context.Context, in *PrivateRepoRequest, opts ...grpc.CallOption) (*PrivateReposResponse, error) {
	out := new(PrivateReposResponse)
	err := c.cc.Invoke(ctx, "/RepoService/UpdateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) DeleteRepo(ctx context.Context, in *PrivateRepoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/RepoService/DeleteRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepoServiceServer is the server API for RepoService service.
// All implementations must embed UnimplementedRepoServiceServer
// for forward compatibility
type RepoServiceServer interface {
	CreateRepo(context.Context, *CreateRepoRequest) (*PrivateRepoResponse, error)
	GetPrivateRepoByIdentifier(context.Context, *IdentifierRequest) (*PrivateRepoResponse, error)
	GetPublicRepoByIdentifier(context.Context, *IdentifierRequest) (*PublicRepoResponse, error)
	GetPrivateRepos(context.Context, *IdentifierRequest) (*PrivateReposResponse, error)
	GetPublicRepos(context.Context, *IdentifierRequest) (*PublicReposResponse, error)
	UpdateRepo(context.Context, *PrivateRepoRequest) (*PrivateReposResponse, error)
	DeleteRepo(context.Context, *PrivateRepoRequest) (*empty.Empty, error)
	mustEmbedUnimplementedRepoServiceServer()
}

// UnimplementedRepoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepoServiceServer struct {
}

func (UnimplementedRepoServiceServer) CreateRepo(context.Context, *CreateRepoRequest) (*PrivateRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedRepoServiceServer) GetPrivateRepoByIdentifier(context.Context, *IdentifierRequest) (*PrivateRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateRepoByIdentifier not implemented")
}
func (UnimplementedRepoServiceServer) GetPublicRepoByIdentifier(context.Context, *IdentifierRequest) (*PublicRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicRepoByIdentifier not implemented")
}
func (UnimplementedRepoServiceServer) GetPrivateRepos(context.Context, *IdentifierRequest) (*PrivateReposResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateRepos not implemented")
}
func (UnimplementedRepoServiceServer) GetPublicRepos(context.Context, *IdentifierRequest) (*PublicReposResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicRepos not implemented")
}
func (UnimplementedRepoServiceServer) UpdateRepo(context.Context, *PrivateRepoRequest) (*PrivateReposResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepo not implemented")
}
func (UnimplementedRepoServiceServer) DeleteRepo(context.Context, *PrivateRepoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepo not implemented")
}
func (UnimplementedRepoServiceServer) mustEmbedUnimplementedRepoServiceServer() {}

// UnsafeRepoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepoServiceServer will
// result in compilation errors.
type UnsafeRepoServiceServer interface {
	mustEmbedUnimplementedRepoServiceServer()
}

func RegisterRepoServiceServer(s grpc.ServiceRegistrar, srv RepoServiceServer) {
	s.RegisterService(&RepoService_ServiceDesc, srv)
}

func _RepoService_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RepoService/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).CreateRepo(ctx, req.(*CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetPrivateRepoByIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetPrivateRepoByIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RepoService/GetPrivateRepoByIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetPrivateRepoByIdentifier(ctx, req.(*IdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetPublicRepoByIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetPublicRepoByIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RepoService/GetPublicRepoByIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetPublicRepoByIdentifier(ctx, req.(*IdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetPrivateRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetPrivateRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RepoService/GetPrivateRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetPrivateRepos(ctx, req.(*IdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetPublicRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetPublicRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RepoService/GetPublicRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetPublicRepos(ctx, req.(*IdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_UpdateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).UpdateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RepoService/UpdateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).UpdateRepo(ctx, req.(*PrivateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RepoService/DeleteRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).DeleteRepo(ctx, req.(*PrivateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepoService_ServiceDesc is the grpc.ServiceDesc for RepoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RepoService",
	HandlerType: (*RepoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _RepoService_CreateRepo_Handler,
		},
		{
			MethodName: "GetPrivateRepoByIdentifier",
			Handler:    _RepoService_GetPrivateRepoByIdentifier_Handler,
		},
		{
			MethodName: "GetPublicRepoByIdentifier",
			Handler:    _RepoService_GetPublicRepoByIdentifier_Handler,
		},
		{
			MethodName: "GetPrivateRepos",
			Handler:    _RepoService_GetPrivateRepos_Handler,
		},
		{
			MethodName: "GetPublicRepos",
			Handler:    _RepoService_GetPublicRepos_Handler,
		},
		{
			MethodName: "UpdateRepo",
			Handler:    _RepoService_UpdateRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _RepoService_DeleteRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repo_service.proto",
}
